import sys

from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *

from gui import Ui_MainWindow  # autogenerated .py from qt designer


class iceMainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        QMainWindow.__init__(self)
        self.setupUi(self)
        self.inputToolButton.clicked.connect(self.openInputDirectoryDialog)
        self.outputToolButton.clicked.connect(self.openOutputDirectoryDialog)
        self.convertPushButton.clicked.connect(self.convertOnClick)
        self.logLabel.setText("Finished setup")

    def openInputDirectoryDialog(self):
        path = str(QFileDialog.getExistingDirectory(self, "Select Input Folder"))
        self.inputLineEdit.setText(path)
        self.logLabel.setText("Set input path to " + path)

    def openOutputDirectoryDialog(self):
        path = str(QFileDialog.getExistingDirectory(self, "Select Output Folder"))
        self.outputLineEdit.setText(path)
        self.logLabel.setText("Set output path to " + path)

    def updateConvertButtonIfNotEmpty(self):
        # TODO
        pass

    def convertOnClick(self):
        inputPath = self.inputLineEdit.text()
        outputPath = self.outputLineEdit.text()
        selectedOd = self.odDoubleSpinBox.value()
        selectedHp = self.hpDoubleSpinBox.value()
        selectedHitSoundVolume = self.hsVolumeSpinBox.value()

        # please tell me if there's an easier way to lookup
        # which radio button is checked because this is horrible
        selectedSampleSet = ""
        sampleSetButtons = [
            self.sampleSetNormalRadioButton,
            self.sampleSetSoftRadioButton,
            self.sampleSetDrumRadioButton
        ]

        for button in sampleSetButtons:
            if button.isChecked():
                selectedSampleSet = button.text()
                break

        debugDict = {
            "inputPath": inputPath,
            "outputPath": outputPath,
            "selectedOd": selectedOd,
            "selectedHp": selectedHp,
            "selectedHitSoundVolume": selectedHitSoundVolume,
            "selectedSampleSet": selectedSampleSet
        }

        [print(f"{attribute}={debugDict[attribute]}") for attribute in debugDict]

        # TODO convert


class iceApp(QApplication):
    def __init__(self):
        super().__init__(sys.argv)
        self.setStyle("Fusion")


if __name__ == '__main__':
    app = iceApp()
    iceApp = iceMainWindow()
    iceApp.show()
    sys.exit(app.exec_())
